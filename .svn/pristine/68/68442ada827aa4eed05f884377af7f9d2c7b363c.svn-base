package honeyarcade.common.imp;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import honeyarcade.util.StringUtil;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class ImpController {

	@Value("${imp.uid}")
	private String imp_uid;
	
	@Autowired
	private ImpService impService;
	
	/**
	 * 결제 사용자 아이디 가져오기
	 * @param dataMap
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/common/pay/getImpUid", method=RequestMethod.POST)
	public ResponseEntity getImpUid() throws Exception{
		Map resultMap = new HashMap();
		boolean result = true;
		String errorMsg = null;
		
		try {

			resultMap.put("imp_uid", imp_uid);
			
		}catch(Exception e) {
			log.debug(e.toString());
			
			result = false;
			errorMsg = e.getMessage();
			resultMap.put("errorMsg", errorMsg);
		}
		
		resultMap.put("result", result);
		
		return new ResponseEntity(resultMap, HttpStatus.OK);
	}	
	
	/**
	 * 결제 정보 가져오기 : 결제 키
	 * @param dataMap
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value="/common/pay/getPayInfo", method=RequestMethod.POST)
	public ResponseEntity getPayInfo(@RequestBody Map dataMap) throws Exception{
		Map resultMap = new HashMap();
		boolean result = true;
		String errorMsg = null;
		
		
		try {
			
			Integer landom_length = Integer.parseInt(String.valueOf(dataMap.get("landom_length")));
			List	evtSeqList = (List) dataMap.get("evt_seq_arr");
			
			//	결제 키 생성
			boolean uidCheck = true;
			
			String uid = StringUtil.createMerchantId(landom_length);
			
			while(uidCheck) {
				Integer isKey = impService.isKey(String.valueOf(uid));
				if(isKey >0) {
					uid = StringUtil.createMerchantId(landom_length);
				}else {
					break;
				}
			}
			
			//	결제 상품 조회
			List evtList = impService.getEvtList(evtSeqList);
			
			System.out.println(evtSeqList);
			
			//	결제 품목 생성
			
			//	결제 상품 금액
			
			//	결제자 정보 조회
			
			
			resultMap.put("uid", uid);
			System.out.println(resultMap.toString());
			
		}catch(Exception e) {
			log.debug(e.toString());
			log.debug(dataMap.toString());
			
			result = false;
			errorMsg = e.getMessage();
			resultMap.put("errorMsg", errorMsg);
		}
		
		resultMap.put("result", result);
		
		return new ResponseEntity(resultMap, HttpStatus.OK);
	}
	

	@RequestMapping(value="/common/pay/cancelPay", method=RequestMethod.POST)
	public ResponseEntity cancelPay(@RequestBody Map dataMap) throws Exception{
		Map resultMap = new HashMap();
		boolean result = true;
		String errorMsg = null;
		
		try {
			
			System.out.println(dataMap.toString());
			
		}catch(Exception e) {
			log.debug(e.toString());
			log.debug(dataMap.toString());
			
			result = false;
			errorMsg = e.getMessage();
			resultMap.put("errorMsg", errorMsg);
		}
		
		resultMap.put("result", result);
		
		return new ResponseEntity(resultMap, HttpStatus.OK);
	}
	
	
	
	
	
	
	
}
